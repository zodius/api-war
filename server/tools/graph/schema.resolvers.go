package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"
	"errors"

	"github.com/zodius/api-war/tools/graph/model"
)

// Login is the resolver for the login field.
func (r *mutationResolver) Login(ctx context.Context, username string, password string) (*string, error) {
	token, err := r.Resolver.Service.Login(username, password)
	return &token, err
}

// Register is the resolver for the register field.
func (r *mutationResolver) Register(ctx context.Context, username string, password string) (*int, error) {
	err := r.Resolver.Service.Register(username, password)
	return nil, err
}

// ConquerField is the resolver for the conquerField field.
func (r *mutationResolver) ConquerField(ctx context.Context, fieldID int) (*int, error) {
	// get token from context
	token := ctx.Value("token")
	if token == "" {
		return nil, errors.New("token is required")
	}
	tokenStr := token.(string)
	err := r.Resolver.Service.ConquerField(tokenStr, fieldID, "graphql")
	return nil, err
}

// Fields is the resolver for the fields field.
func (r *queryResolver) Fields(ctx context.Context) ([]*model.Field, error) {
	token := ctx.Value("token")
	if token == nil {
		return nil, errors.New("token is required")
	}
	tokenStr := token.(string)
	fields, err := r.Resolver.Service.GetUserConquerField(tokenStr, "graphql")
	if err != nil {
		return nil, err
	}
	result := make([]*model.Field, 0)
	for _, field := range fields {
		result = append(result, &model.Field{
			ID: field,
		})
	}
	return result, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
